<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objSceneObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_speed = 0;

// identification
player_id = instance_number(objPlayer)-1;
character_id = -1;

// animation
animation_table = -1;
animation = "";
animation_new = "idle";

// states and flags
state = player_state_standby;
spinning = false;
jumping = false;
rolling_jump = false;
jump_action = false;
spindashing = false;
underwater = false;

// movement and collision
terrain_list = ds_list_create();
wall_direction = 0;
xspeed = 0;
yspeed = 0;
layer = 1;
facing = 1;
cliff = 0;

// counters
camera_pan_up = -110;
camera_pan_down = 110;
spindash_charge = 0;
chain_multiplier = 0;

// timers
sliding = 0;
underwater_count = -1;
invulnerable = 0;
ignore_rings = 0;
superspeed = 0;

// camera
camera = instance_create(x, y, objCamera);

// effects
shield = noone;
invincibility = noone;

// set air state
player_in_air();

// initialize values
player_change_character(objGameData.character_id[player_id]);
player_reset_physics();

// system flags
segment_enabled = true;
offscreen_enabled = true;
max_xspeed = 128;
max_yspeed = 128;
limit_xspeed = false;
limit_yspeed = false;

// constant physics values
ceiling_threshold = -4;
ramp_threshold = 2.5;
slide_threshold = 2.5;
waterrun_threshold = 4;
roll_threshold = 1.03125;
unroll_threshold = 0.5;
brake_threshold = 4;
air_friction = 0.96875;
slope_friction = 0.078125;
slope_friction_cap = 0.125;
slope_friction_up = 0.071825;
slope_friction_down = 0.3125;
spindash_friction = 0.96875;

// position table
table_size = 64;
xtable = ds_list_create();
ytable = ds_list_create();

// sound
audio = audio_emitter_create();
reserved_sound = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
ds_list_destroy(terrain_list);
ds_list_destroy(xtable);
ds_list_destroy(ytable);
audio_emitter_free(audio);

// Remove tails' tails
if (character_id==2) with tails_effect instance_destroy();

// Remove id
objLevel.player[player_id] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Self-contained null counter</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update animation and particles

// update animation
if (animation_table&gt;-1) and (animation!=animation_new)
{
    animation = animation_new;
    timeline_index = ds_map_find_value(animation_table, animation);
    timeline_position = 0;
}

// flashing
image_alpha = 1-((invulnerable div 4) mod 2);

// bubbles
if (underwater_count mod 60)==0 with instance_create(x+facing*8, y-8, objBubble) {size = 1; offset = 180*(other.facing&lt;1);}

// brake dust
if landed and (animation=="brake" or animation=="glide_slide") and not (objScreen.image_index mod 4) part_particles_create(objLevel.particles, x, y+offset_y-7, objResources.dust, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle timers

// null counters
if sliding sliding -= 1;
if invulnerable invulnerable -= 1;
if ignore_rings ignore_rings -= 1;

// superspeed
if superspeed
{
    superspeed -= 1;
    if not superspeed {player_reset_physics();} // reset music
}

// underwater
if underwater
{
    underwater_count -= 1;
    switch underwater_count
    {
        case 1440: case 1140: case 840: audio_play_sound_on(audio, sndDrownWarning, false, 0); break;
        case 660: if player_id==0 {audio_set_priority(bgmDrowning, 2); audio_play_priority(false);} break;
        case 0: player_is_drowning(); break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle current state
switch state
{
case player_state_dead: // process dead state
    player_state_dead();
    break;

default: // normal activity
    // handle timeout
    if objGameData.timeout and objLevel.timer_enabled and not (objLevel.cleared or objLevel.timer)
    {
        objProgram.spawn_time = 36000;
        audio_play_sound_on(audio, sndHurt, false, 0);
        player_is_dead();
    }

    // update position table
    ds_list_add(xtable, x);
    ds_list_add(ytable, y);
    if ds_list_size(xtable)&gt;table_size ds_list_delete(xtable, 0);
    if ds_list_size(ytable)&gt;table_size ds_list_delete(ytable, 0);

    // execute state
    if state script_execute(state);

    // set camera to current position
    camera.x = floor(x);
    camera.y = floor(y);

    // reset vertical panning
    if (state!=player_state_look) and (state!=player_state_crouch) camera.offset_y -= 2*sign(camera.offset_y);

    // update emitter position
    audio_emitter_position(audio, floor(x), floor(y), 0); //layer);

    // update listener
    if (player_id==0) audio_listener_position(camera.x, camera.y, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDashring">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>11</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDashpanel">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>11</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSpeedmodeWalk">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute end of path
var path_xspeed, path_yspeed;

// get absolute speed for conversion
path_xspeed = x-xprevious;
path_yspeed = y-yprevious;

// handle based on state
switch state
{
case player_state_path: // basic path
    // states and flags
    state = player_state_fall;

    // movement and collision
    xspeed = (cosine[angle]*path_xspeed)-(sine[angle]*path_yspeed);
    yspeed = -(sine[angle]*path_xspeed)+(cosine[angle]*path_yspeed);

    // set air state
    player_in_air();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
ds_list_destroy(terrain_list);
ds_list_destroy(xtable);
ds_list_destroy(ytable);
audio_emitter_free(audio);

// Remove id
objLevel.player[player_id] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw character image
if sprite_index&gt;-1 draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), image_xscale*facing, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>debug_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw collision mask
var x1, y1, x2, y2;

// bounding box
draw_set_color(c_lime);
draw_set_alpha(image_alpha);
if mask_rotation mod 180 draw_rectangle(floor(x)-offset_y, floor(y)-offset_x, floor(x)+offset_y, floor(y)+offset_x, true); else
draw_rectangle(floor(x)-offset_x, floor(y)-offset_y, floor(x)+offset_x, floor(y)+offset_y, true);

// wall sensor
x1 = floor(x)-cosine[mask_rotation]*offset_wall;
y1 = floor(y)+sine[mask_rotation]*offset_wall;
x2 = floor(x)+cosine[mask_rotation]*offset_wall;
y2 = floor(y)-sine[mask_rotation]*offset_wall;
draw_set_color(c_white);
draw_line(x1, y1, x2, y2);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>debug_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-128</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>debug_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>128</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
