<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize input device
image_speed = 0;
var i;

// input id
port = instance_number(objInput);

// input state
state = 0;
state_press = 0;
state_release = 0;

// joystick support
joystick_count = joystick_axes(port) div 2;
joystick_deadzone = 0.25;

// input stream
stream = -1;
stream_size = $FF;

// keycodes
for (i=0; i&lt;8; i+=1) {code_keyboard[i] = -1; code_joystick[i] = -1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get device state
var buffer, i;

// clear states
buffer = state;
state = 0;
state_press = 0;
state_release = 0;

// keyboard input
for (i=0; i&lt;8; i+=1) if keyboard_check(code_keyboard[i]) state |= power(2, i);

// check joystick availability
if joystick_exists(port)
{
    // joystick button input
    for (i=0; i&lt;8; i+=1) if joystick_check_button(port, code_joystick[i]) state |= power(2, i);

    // analog stick input
    if joystick_ypos(port)&lt;-joystick_deadzone state |= cUP;
    if joystick_ypos(port)&gt;joystick_deadzone state |= cDOWN;
    if joystick_xpos(port)&lt;-joystick_deadzone state |= cLEFT;
    if joystick_xpos(port)&gt;joystick_deadzone state |= cRIGHT;
}

// negate opposite inputs
if state&amp;cUP and state&amp;cDOWN state ^= (cUP|cDOWN);
if state&amp;cLEFT and state&amp;cRIGHT state ^= (cLEFT|cRIGHT);

// pressing and releasing
state_press = (state&amp;buffer)^state;
state_release = (state&amp;buffer)^buffer;

// queue input state
ds_list_add(stream, state);
if ds_list_size(stream)&gt;stream_size ds_list_delete(stream, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete input stream
if stream ds_list_destroy(stream);
stream = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create input stream
stream = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
